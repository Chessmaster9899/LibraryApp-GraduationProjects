@model ProfessorDashboardViewModel
@{
    ViewData["Title"] = "Professor Dashboard";
}

<!-- Enhanced Professor Dashboard - High-End Design -->
<div class="dashboard-container">
    <!-- Modern Welcome Header with Analytics -->
    <div class="welcome-section mb-4">
        <div class="card border-0 shadow-lg overflow-hidden">
            <div class="card-header bg-gradient-primary text-white p-0">
                <div class="row g-0">
                    <div class="col-lg-8">
                        <div class="p-4">
                            <div class="d-flex align-items-center mb-3">
                                <div class="avatar-lg me-3">
                                    <div class="avatar-title bg-white bg-opacity-20 rounded-circle">
                                        <i class="fas fa-chalkboard-teacher fa-2x"></i>
                                    </div>
                                </div>
                                <div>
                                    <h1 class="h3 mb-1 fw-bold">Welcome back, @Model.Professor.Title @Model.Professor.LastName</h1>
                                    <p class="mb-0 opacity-85">@Model.Professor.Department?.Name â€¢ @Model.Professor.Specialization</p>
                                </div>
                            </div>
                            <div class="row text-center">
                                <div class="col-4">
                                    <div class="p-2">
                                        <h4 class="mb-1 fw-bold">@(Model.TotalSupervisedProjects + Model.TotalEvaluatedProjects)</h4>
                                        <small class="opacity-75">Total Projects</small>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="p-2">
                                        <h4 class="mb-1 fw-bold">@((Model.CompletedSupervisedProjects + Model.CompletedEvaluatedProjects))</h4>
                                        <small class="opacity-75">Completed</small>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="p-2">
                                        @{
                                            var totalProjects = Model.TotalSupervisedProjects + Model.TotalEvaluatedProjects;
                                            var completionRate = totalProjects > 0 ? Math.Round(((double)(Model.CompletedSupervisedProjects + Model.CompletedEvaluatedProjects) / totalProjects) * 100, 1) : 0;
                                        }
                                        <h4 class="mb-1 fw-bold">@completionRate%</h4>
                                        <small class="opacity-75">Success Rate</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 d-none d-lg-block">
                        <div class="p-4 text-center">
                            <div class="dashboard-chart-container">
                                <canvas id="projectsChart" width="200" height="200"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Advanced Metrics Grid -->
    <div class="row mb-4">
        <!-- Supervised Projects Card -->
        <div class="col-xl-3 col-lg-6 mb-4">
            <div class="card border-0 shadow-sm h-100 card-hover">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center justify-content-between mb-3">
                        <div class="metric-icon bg-primary bg-opacity-10 text-primary">
                            <i class="fas fa-user-tie"></i>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-link text-muted p-0" data-bs-toggle="dropdown">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="@Url.Action("SupervisedProjects")">View All</a></li>
                            </ul>
                        </div>
                    </div>
                    <h3 class="mb-1 fw-bold text-primary">@Model.TotalSupervisedProjects</h3>
                    <p class="text-muted mb-2 small">Supervised Projects</p>
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="progress flex-grow-1 me-2" style="height: 6px;">
                            @{
                                var supervisedProgress = Model.TotalSupervisedProjects > 0 ? (Model.CompletedSupervisedProjects * 100.0 / Model.TotalSupervisedProjects) : 0;
                            }
                            <div class="progress-bar bg-primary" style="width: @(supervisedProgress)%"></div>
                        </div>
                        <small class="text-success fw-semibold">@Model.CompletedSupervisedProjects done</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Evaluated Projects Card -->
        <div class="col-xl-3 col-lg-6 mb-4">
            <div class="card border-0 shadow-sm h-100 card-hover">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center justify-content-between mb-3">
                        <div class="metric-icon bg-success bg-opacity-10 text-success">
                            <i class="fas fa-clipboard-check"></i>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-link text-muted p-0" data-bs-toggle="dropdown">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="@Url.Action("EvaluatedProjects")">View All</a></li>
                            </ul>
                        </div>
                    </div>
                    <h3 class="mb-1 fw-bold text-success">@Model.TotalEvaluatedProjects</h3>
                    <p class="text-muted mb-2 small">Evaluated Projects</p>
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="progress flex-grow-1 me-2" style="height: 6px;">
                            @{
                                var evaluatedProgress = Model.TotalEvaluatedProjects > 0 ? (Model.CompletedEvaluatedProjects * 100.0 / Model.TotalEvaluatedProjects) : 0;
                            }
                            <div class="progress-bar bg-success" style="width: @(evaluatedProgress)%"></div>
                        </div>
                        <small class="text-success fw-semibold">@Model.CompletedEvaluatedProjects done</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Active Students Card -->
        <div class="col-xl-3 col-lg-6 mb-4">
            <div class="card border-0 shadow-sm h-100 card-hover">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center justify-content-between mb-3">
                        <div class="metric-icon bg-info bg-opacity-10 text-info">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-link text-muted p-0" data-bs-toggle="dropdown">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="@Url.Action("MyStudents")">View All Students</a></li>
                            </ul>
                        </div>
                    </div>
                    @{
                        var uniqueStudents = Model.RecentSupervisedProjects.Select(p => p.StudentId).Union(Model.RecentEvaluatedProjects.Select(p => p.StudentId)).Distinct().Count();
                    }
                    <h3 class="mb-1 fw-bold text-info">@uniqueStudents</h3>
                    <p class="text-muted mb-2 small">Active Students</p>
                    <div class="d-flex align-items-center">
                        <i class="fas fa-arrow-up text-success me-1"></i>
                        <small class="text-success">Currently mentoring</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Workload Distribution Card -->
        <div class="col-xl-3 col-lg-6 mb-4">
            <div class="card border-0 shadow-sm h-100 card-hover">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center justify-content-between mb-3">
                        <div class="metric-icon bg-warning bg-opacity-10 text-warning">
                            <i class="fas fa-chart-pie"></i>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-link text-muted p-0" data-bs-toggle="dropdown">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li><span class="dropdown-item-text text-muted">No additional options</span></li>
                            </ul>
                        </div>
                    </div>
                    @{
                        var workloadScore = (Model.TotalSupervisedProjects * 0.7) + (Model.TotalEvaluatedProjects * 0.3);
                        var workloadLevel = workloadScore < 5 ? "Light" : workloadScore < 10 ? "Moderate" : workloadScore < 15 ? "Heavy" : "Very Heavy";
                        var workloadColor = workloadScore < 5 ? "success" : workloadScore < 10 ? "info" : workloadScore < 15 ? "warning" : "danger";
                    }
                    <h3 class="mb-1 fw-bold text-@workloadColor">@workloadLevel</h3>
                    <p class="text-muted mb-2 small">Current Workload</p>
                    <div class="d-flex align-items-center">
                        <div class="progress flex-grow-1 me-2" style="height: 6px;">
                            <div class="progress-bar bg-@workloadColor" style="width: @(Math.Min(workloadScore * 5, 100))%"></div>
                        </div>
                        <small class="text-@workloadColor fw-semibold">@Math.Round(workloadScore, 1)</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Advanced Dashboard Tabs -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-bottom">
                    <ul class="nav nav-tabs nav-tabs-custom card-header-tabs" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link active" data-bs-toggle="tab" href="#recent-activity" role="tab">
                                <i class="fas fa-clock me-2"></i>Recent Activity
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-bs-toggle="tab" href="#project-pipeline" role="tab">
                                <i class="fas fa-stream me-2"></i>Project Pipeline
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-bs-toggle="tab" href="#analytics" role="tab">
                                <i class="fas fa-chart-line me-2"></i>Analytics
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-bs-toggle="tab" href="#quick-actions" role="tab">
                                <i class="fas fa-bolt me-2"></i>Quick Actions
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="card-body">
                    <div class="tab-content">
                        <!-- Recent Activity Tab -->
                        <div class="tab-pane fade show active" id="recent-activity" role="tabpanel">
                            <div class="row">
                                <div class="col-lg-6">
                                    <h6 class="text-muted mb-3">Recent Supervised Projects</h6>
                                    <div class="timeline">
                                        @foreach (var project in Model.RecentSupervisedProjects.Take(5))
                                        {
                                            <div class="timeline-item">
                                                <div class="timeline-marker bg-primary"></div>
                                                <div class="timeline-content">
                                                    <h6 class="mb-1">@project.Title</h6>
                                                    <p class="text-muted mb-1 small">@project.Student?.FullName</p>
                                                    <div class="d-flex align-items-center justify-content-between">
                                                        @await Html.PartialAsync("_ProjectStatusBadge", project.Status)
                                                        <small class="text-muted">@project.SubmissionDate.ToString("MMM dd")</small>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <h6 class="text-muted mb-3">Recent Evaluated Projects</h6>
                                    <div class="timeline">
                                        @foreach (var project in Model.RecentEvaluatedProjects.Take(5))
                                        {
                                            <div class="timeline-item">
                                                <div class="timeline-marker bg-success"></div>
                                                <div class="timeline-content">
                                                    <h6 class="mb-1">@project.Title</h6>
                                                    <p class="text-muted mb-1 small">@project.Student?.FullName</p>
                                                    <div class="d-flex align-items-center justify-content-between">
                                                        @await Html.PartialAsync("_ProjectStatusBadge", project.Status)
                                                        <small class="text-muted">@project.SubmissionDate.ToString("MMM dd")</small>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Project Pipeline Tab -->
                        <div class="tab-pane fade" id="project-pipeline" role="tabpanel">
                            <div class="row">
                                @{
                                    var allProjects = Model.RecentSupervisedProjects.Union(Model.RecentEvaluatedProjects).ToList();
                                    var proposedProjects = allProjects.Where(p => p.Status == ProjectStatus.Proposed).ToList();
                                    var inProgressProjects = allProjects.Where(p => p.Status == ProjectStatus.InProgress).ToList();
                                    var reviewProjects = allProjects.Where(p => p.Status == ProjectStatus.SubmittedForReview).ToList();
                                    var completedProjects = allProjects.Where(p => p.Status == ProjectStatus.Completed || p.Status == ProjectStatus.Defended).ToList();
                                }
                                
                                <div class="col-md-3">
                                    <div class="pipeline-stage">
                                        <h6 class="text-muted mb-3">Proposed (@proposedProjects.Count())</h6>
                                        @foreach (var project in proposedProjects.Take(3))
                                        {
                                            <div class="pipeline-item bg-light">
                                                <h6 class="mb-1">@project.Title</h6>
                                                <small class="text-muted">@project.Student?.FullName</small>
                                            </div>
                                        }
                                    </div>
                                </div>
                                
                                <div class="col-md-3">
                                    <div class="pipeline-stage">
                                        <h6 class="text-muted mb-3">In Progress (@inProgressProjects.Count())</h6>
                                        @foreach (var project in inProgressProjects.Take(3))
                                        {
                                            <div class="pipeline-item bg-warning bg-opacity-10">
                                                <h6 class="mb-1">@project.Title</h6>
                                                <small class="text-muted">@project.Student?.FullName</small>
                                            </div>
                                        }
                                    </div>
                                </div>
                                
                                <div class="col-md-3">
                                    <div class="pipeline-stage">
                                        <h6 class="text-muted mb-3">Under Review (@reviewProjects.Count())</h6>
                                        @foreach (var project in reviewProjects.Take(3))
                                        {
                                            <div class="pipeline-item bg-info bg-opacity-10">
                                                <h6 class="mb-1">@project.Title</h6>
                                                <small class="text-muted">@project.Student?.FullName</small>
                                            </div>
                                        }
                                    </div>
                                </div>
                                
                                <div class="col-md-3">
                                    <div class="pipeline-stage">
                                        <h6 class="text-muted mb-3">Completed (@completedProjects.Count())</h6>
                                        @foreach (var project in completedProjects.Take(3))
                                        {
                                            <div class="pipeline-item bg-success bg-opacity-10">
                                                <h6 class="mb-1">@project.Title</h6>
                                                <small class="text-muted">@project.Student?.FullName</small>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Analytics Tab -->
                        <div class="tab-pane fade" id="analytics" role="tabpanel">
                            <div class="row">
                                <div class="col-lg-8">
                                    <h6 class="text-muted mb-3">Project Completion Trends</h6>
                                    <canvas id="completionTrendsChart" height="300"></canvas>
                                </div>
                                <div class="col-lg-4">
                                    <h6 class="text-muted mb-3">Project Distribution</h6>
                                    <canvas id="distributionChart" height="300"></canvas>
                                </div>
                            </div>
                        </div>

                        <!-- Quick Actions Tab -->
                        <div class="tab-pane fade" id="quick-actions" role="tabpanel">
                            <div class="row">
                                <div class="col-lg-6 mb-3">
                                    <div class="quick-action-card" onclick="exportReports()">
                                        <i class="fas fa-file-export text-success fa-2x mb-3"></i>
                                        <h6>Export Reports</h6>
                                        <p class="text-muted small">Generate comprehensive reports</p>
                                    </div>
                                </div>
                                <div class="col-lg-6 mb-3">
                                    <div class="quick-action-card">
                                        <i class="fas fa-bell text-warning fa-2x mb-3"></i>
                                        <h6>Notifications</h6>
                                        <p class="text-muted small">View and manage notifications</p>
                                        <a href="@Url.Action("Index", "Notifications")" class="btn btn-warning btn-sm">View Notifications</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* High-End Dashboard Styles */
.dashboard-container {
    background-color: #f8f9fa;
    min-height: 100vh;
    padding: 20px 0;
}

.bg-gradient-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.card-hover {
    transition: all 0.3s ease;
}

.card-hover:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0,0,0,0.1) !important;
}

.metric-icon {
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 12px;
    font-size: 20px;
}

.avatar-lg {
    width: 4rem;
    height: 4rem;
}

.avatar-title {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.timeline {
    position: relative;
    padding-left: 30px;
}

.timeline-item {
    position: relative;
    margin-bottom: 20px;
}

.timeline-marker {
    position: absolute;
    left: -35px;
    top: 5px;
    width: 10px;
    height: 10px;
    border-radius: 50%;
}

.timeline-content {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 15px;
}

.pipeline-stage {
    min-height: 300px;
}

.pipeline-item {
    margin-bottom: 10px;
    padding: 12px;
    border-radius: 8px;
    border-left: 4px solid #007bff;
}

.quick-action-card {
    text-align: center;
    padding: 30px 20px;
    border: 1px solid #e9ecef;
    border-radius: 12px;
    background: white;
    transition: all 0.3s ease;
}

.quick-action-card:hover {
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    transform: translateY(-3px);
}

.nav-tabs-custom .nav-link {
    border: none;
    color: #6c757d;
    font-weight: 500;
    padding: 12px 20px;
}

.nav-tabs-custom .nav-link.active {
    color: #495057;
    background-color: transparent;
    border-bottom: 3px solid #007bff;
}

.dashboard-chart-container {
    position: relative;
    height: 150px;
    width: 150px;
    margin: 0 auto;
}

@@media (max-width: 768px) {
    .dashboard-container {
        padding: 10px 0;
    }
    
    .card-body {
        padding: 20px !important;
    }
    
    .metric-icon {
        width: 40px;
        height: 40px;
        font-size: 18px;
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Check if Chart.js is available
    if (typeof Chart !== 'undefined') {
        initializeDashboardCharts();
    } else {
        console.warn('Chart.js library not available. Charts will be disabled.');
        // Hide chart containers and show fallback
        const chartContainers = document.querySelectorAll('#projectsChart, #workloadChart, #performanceChart');
        chartContainers.forEach(container => {
            if (container) {
                container.innerHTML = '<div class="text-center p-4 text-muted"><i class="fas fa-chart-pie fa-3x mb-2"></i><br>Charts temporarily unavailable</div>';
            }
        });
    }
});

function initializeDashboardCharts() {
    // Projects Overview Donut Chart
    const projectsCtx = document.getElementById('projectsChart');
    if (projectsCtx) {
        try {
            new Chart(projectsCtx.getContext('2d'), {
        type: 'doughnut',
        data: {
            labels: ['Supervised', 'Evaluated'],
            datasets: [{
                data: [@Model.TotalSupervisedProjects, @Model.TotalEvaluatedProjects],
                backgroundColor: ['#667eea', '#764ba2'],
                borderWidth: 0
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });
        } catch (error) {
            console.warn('Failed to initialize projects chart:', error);
            projectsCtx.innerHTML = '<div class="text-center p-4 text-muted"><i class="fas fa-chart-doughnut fa-2x mb-2"></i><br>Chart temporarily unavailable</div>';
        }
    }

    // Completion Trends Chart (if analytics tab is active)
    setTimeout(() => {
        const trendsCtx = document.getElementById('completionTrendsChart');
        if (trendsCtx) {
            try {
                new Chart(trendsCtx, {
                type: 'line',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                    datasets: [{
                        label: 'Completed Projects',
                        data: [2, 3, 1, 4, 2, 5],
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
            } catch (error) {
                console.warn('Failed to initialize completion trends chart:', error);
                trendsCtx.innerHTML = '<div class="text-center p-4 text-muted"><i class="fas fa-chart-line fa-2x mb-2"></i><br>Chart temporarily unavailable</div>';
            }
        }
    }, 100);
}

function exportReports() {
    window.location.href = '@Url.Action("ExportDashboardData", "Professor")';
}
</script>