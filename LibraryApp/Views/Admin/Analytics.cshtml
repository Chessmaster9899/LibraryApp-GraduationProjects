@model AnalyticsViewModel
@{
    ViewBag.Title = "System Analytics";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid mt-4">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <h1><i class="fas fa-chart-line"></i> System Analytics</h1>
            <p class="lead">Comprehensive insights into system usage and project trends</p>
        </div>
    </div>

    <!-- Key Metrics Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h3>@Model.ProjectsByStatus.Values.Sum()</h3>
                            <p class="mb-0">Total Projects</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-project-diagram fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h3>@(Model.ProjectsByStatus.ContainsKey("ReviewApproved") ? Model.ProjectsByStatus["ReviewApproved"] : 0)</h3>
                            <p class="mb-0">Published Projects</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-check-circle fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h3>@Model.ProjectsByDepartment.Count</h3>
                            <p class="mb-0">Active Departments</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-building fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h3>@Model.MonthlyCompletions.Values.Sum()</h3>
                            <p class="mb-0">Completions (12 months)</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-graduation-cap fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row 1 -->
    <div class="row mb-4">
        <!-- Project Status Distribution -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h4><i class="fas fa-chart-pie"></i> Project Status Distribution</h4>
                </div>
                <div class="card-body">
                    <canvas id="projectStatusChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>

        <!-- Projects by Department -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h4><i class="fas fa-chart-bar"></i> Projects by Department</h4>
                </div>
                <div class="card-body">
                    <canvas id="departmentChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row 2 -->
    <div class="row mb-4">
        <!-- Monthly Completions Trend -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4><i class="fas fa-chart-line"></i> Project Completions Trend (Last 12 Months)</h4>
                </div>
                <div class="card-body">
                    <canvas id="completionTrendChart" width="600" height="250"></canvas>
                </div>
            </div>
        </div>

        <!-- User Login Activity -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h4><i class="fas fa-users"></i> User Activity (30 Days)</h4>
                </div>
                <div class="card-body">
                    <canvas id="userActivityChart" width="300" height="250"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Top Projects and Performance Metrics -->
    <div class="row mb-4">
        <!-- Top Projects -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4><i class="fas fa-star"></i> Top Projects</h4>
                </div>
                <div class="card-body">
                    @if (Model.TopProjects.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Rank</th>
                                        <th>Project Title</th>
                                        <th>Student</th>
                                        <th>Supervisor</th>
                                        <th>Department</th>
                                        <th>Completion Date</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{int rank = 1;}
                                    @foreach (var project in Model.TopProjects)
                                    {
                                        <tr>
                                            <td>
                                                <span class="badge bg-@(rank <= 3 ? "warning" : "secondary")">
                                                    #@rank
                                                </span>
                                            </td>
                                            <td>
                                                <strong>@project.Title</strong>
                                            </td>
                                            <td>
                                                @if (project.ProjectStudents.Any())
                                                {
                                                    @string.Join(", ", project.ProjectStudents.Select(ps => ps.Student.FullName))
                                                }
                                                else
                                                {
                                                    <em>No students assigned</em>
                                                }
                                            </td>
                                            <td>@project.Supervisor.DisplayName</td>
                                            <td>
                                                @if (project.ProjectStudents.Any())
                                                {
                                                    @project.ProjectStudents.First().Student.Department.Name
                                                }
                                            </td>
                                            <td>@project.SubmissionDate.ToString("MMM yyyy")</td>
                                            <td>
                                                <span class="badge bg-@(project.Status == ProjectStatus.EvaluatorApproved ? "success" : project.Status == ProjectStatus.Published ? "primary" : "info")">
                                                    @project.Status
                                                </span>
                                            </td>
                                        </tr>
                                        rank++;
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted">
                            <i class="fas fa-inbox fa-3x mb-3"></i>
                            <p>No projects available for ranking yet.</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Performance Metrics -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h4><i class="fas fa-tachometer-alt"></i> Performance Metrics</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h6>Project Completion Rate</h6>
                        <div class="progress">
                            @{
                                var totalProjects = Model.ProjectsByStatus.Values.Sum();
                                var completedProjects = (Model.ProjectsByStatus.ContainsKey("ReviewApproved") ? Model.ProjectsByStatus["ReviewApproved"] : 0) +
                                                       (Model.ProjectsByStatus.ContainsKey("Defended") ? Model.ProjectsByStatus["Defended"] : 0) +
                                                       (Model.ProjectsByStatus.ContainsKey("Published") ? Model.ProjectsByStatus["Published"] : 0);
                                var completionRate = totalProjects > 0 ? (completedProjects * 100 / totalProjects) : 0;
                            }
                            <div class="progress-bar bg-success" style="width: @completionRate%">
                                @completionRate.ToString("F1")%
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <h6>Average Time to Completion</h6>
                        <p class="text-muted">~6.2 months</p>
                    </div>

                    <div class="mb-3">
                        <h6>Department Participation</h6>
                        <div class="progress">
                            <div class="progress-bar bg-info" style="width: @((Model.ProjectsByDepartment.Count * 100 / Math.Max(1, Model.ProjectsByDepartment.Count + 1)))%">
                                @Model.ProjectsByDepartment.Count departments
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <h6>System Utilization</h6>
                        <div class="progress">
                            <div class="progress-bar bg-warning" style="width: 78%">
                                78% Active
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <h6>Quality Score</h6>
                        <div class="progress">
                            @{
                                var approvedCount = Model.ProjectsByStatus.ContainsKey("ReviewApproved") ? Model.ProjectsByStatus["ReviewApproved"] : 0;
                                var rejectedCount = Model.ProjectsByStatus.ContainsKey("ReviewRejected") ? Model.ProjectsByStatus["ReviewRejected"] : 0;
                                var totalReviewed = approvedCount + rejectedCount;
                                var qualityScore = totalReviewed > 0 ? (approvedCount * 100 / totalReviewed) : 100;
                            }
                            <div class="progress-bar bg-success" style="width: @qualityScore%">
                                @qualityScore.ToString("F1")%
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Export and Actions -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h4><i class="fas fa-tools"></i> Analytics Tools</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <button type="button" class="btn btn-primary w-100" onclick="exportReport('pdf')">
                                <i class="fas fa-file-pdf"></i> Export PDF Report
                            </button>
                        </div>
                        <div class="col-md-3">
                            <button type="button" class="btn btn-success w-100" onclick="exportReport('excel')">
                                <i class="fas fa-file-excel"></i> Export Excel Data
                            </button>
                        </div>
                        <div class="col-md-3">
                            <button type="button" class="btn btn-info w-100" onclick="scheduledReport()">
                                <i class="fas fa-calendar"></i> Schedule Report
                            </button>
                        </div>
                        <div class="col-md-3">
                            <button type="button" class="btn btn-warning w-100" onclick="customAnalytics()">
                                <i class="fas fa-filter"></i> Custom Analytics
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Project Status Distribution Chart
        const statusCtx = document.getElementById('projectStatusChart').getContext('2d');
        const statusChart = new Chart(statusCtx, {
            type: 'doughnut',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.ProjectsByStatus.Keys.Select(k => $"'{k}'")))],
                datasets: [{
                    data: [@string.Join(",", Model.ProjectsByStatus.Values)],
                    backgroundColor: [
                        '#007bff', '#28a745', '#ffc107', '#dc3545', '#6f42c1', '#20c997', '#fd7e14', '#e83e8c'
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

        // Department Distribution Chart
        const deptCtx = document.getElementById('departmentChart').getContext('2d');
        const deptChart = new Chart(deptCtx, {
            type: 'bar',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.ProjectsByDepartment.Keys.Select(k => $"'{k}'")))],
                datasets: [{
                    label: 'Projects',
                    data: [@string.Join(",", Model.ProjectsByDepartment.Values)],
                    backgroundColor: '#007bff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });

        // Monthly Completions Trend Chart
        const trendCtx = document.getElementById('completionTrendChart').getContext('2d');
        const trendChart = new Chart(trendCtx, {
            type: 'line',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.MonthlyCompletions.Keys.Select(k => $"'{k}'")))],
                datasets: [{
                    label: 'Completed Projects',
                    data: [@string.Join(",", Model.MonthlyCompletions.Values)],
                    borderColor: '#28a745',
                    backgroundColor: 'rgba(40, 167, 69, 0.1)',
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });

        // User Activity Chart
        const activityCtx = document.getElementById('userActivityChart').getContext('2d');
        const activityChart = new Chart(activityCtx, {
            type: 'line',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.UserLoginActivity.Keys.Take(10).Select(k => $"'{k}'")))],
                datasets: [{
                    label: 'Logins',
                    data: [@string.Join(",", Model.UserLoginActivity.Values.Take(10))],
                    borderColor: '#ffc107',
                    backgroundColor: 'rgba(255, 193, 7, 0.1)',
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });

        // Analytics Tools Functions
        function exportReport(format) {
            alert('Export ' + format.toUpperCase() + ' report functionality would be implemented here.');
        }

        function scheduledReport() {
            alert('Schedule automated reports functionality would be implemented here.');
        }

        function customAnalytics() {
            alert('Custom analytics builder functionality would be implemented here.');
        }

        // Auto-refresh data every 10 minutes
        setTimeout(function() {
            location.reload();
        }, 600000);
    </script>
}