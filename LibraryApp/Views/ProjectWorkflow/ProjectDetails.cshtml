@model ProjectWorkflowDetailsViewModel
@{
    ViewData["Title"] = "Project Workflow Details";
}

@Html.AntiForgeryToken()

<div class="workflow-details-wrapper">
    <div class="page-header">
        <div class="header-content">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index")">Project Workflow</a></li>
                    <li class="breadcrumb-item active">@Model.Project.Title</li>
                </ol>
            </nav>
            <h1 class="page-title">@Model.Project.Title</h1>
            <div class="project-status-badge">
                <span class="status-badge @GetStatusClass(Model.Project.Status)">
                    <i class="@GetStatusIcon(Model.Project.Status)"></i>
                    @GetStatusDisplayName(Model.Project.Status)
                </span>
            </div>
        </div>
        <div class="page-actions">
            <a href="@Url.Action("Details", "Projects", new { id = Model.Project.Id })" class="btn btn-outline-secondary">
                <i class="fas fa-eye"></i> View Project
            </a>
        </div>
    </div>

    <div class="workflow-content">
        <!-- Project Information Card -->
        <div class="info-card">
            <div class="card-header">
                <h3><i class="fas fa-info-circle"></i> Project Information</h3>
            </div>
            <div class="card-body">
                <div class="info-grid">
                    <div class="info-item">
                        <label>Student</label>
                        <div class="value">
                            <div class="user-info">
                                <img src="https://ui-avatars.com/api/?name=@Model.Project.Student.FullName&background=007bff&color=fff&size=32" 
                                     alt="@Model.Project.Student.FullName" class="user-avatar">
                                <div>
                                    <strong>@Model.Project.Student.FullName</strong>
                                    <small>@Model.Project.Student.Department.Name</small>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="info-item">
                        <label>Supervisor</label>
                        <div class="value">
                            <div class="user-info">
                                <img src="https://ui-avatars.com/api/?name=@Model.Project.Supervisor.DisplayName&background=28a745&color=fff&size=32" 
                                     alt="@Model.Project.Supervisor.DisplayName" class="user-avatar">
                                <div>
                                    <strong>@Model.Project.Supervisor.DisplayName</strong>
                                    <small>@Model.Project.Supervisor.Department.Name</small>
                                </div>
                            </div>
                        </div>
                    </div>
                    @if (Model.Project.Evaluator != null)
                    {
                        <div class="info-item">
                            <label>Evaluator</label>
                            <div class="value">
                                <div class="user-info">
                                    <img src="https://ui-avatars.com/api/?name=@Model.Project.Evaluator.DisplayName&background=6f42c1&color=fff&size=32" 
                                         alt="@Model.Project.Evaluator.DisplayName" class="user-avatar">
                                    <div>
                                        <strong>@Model.Project.Evaluator.DisplayName</strong>
                                        <small>@Model.Project.Evaluator.Department.Name</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="info-item">
                        <label>Submission Date</label>
                        <div class="value">@Model.Project.SubmissionDate.ToString("MMMM d, yyyy")</div>
                    </div>
                    @if (Model.Project.DefenseDate.HasValue)
                    {
                        <div class="info-item">
                            <label>Defense Date</label>
                            <div class="value">@Model.Project.DefenseDate.Value.ToString("MMMM d, yyyy HH:mm")</div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.Project.Grade))
                    {
                        <div class="info-item">
                            <label>Grade</label>
                            <div class="value">
                                <span class="grade-badge">@Model.Project.Grade</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Workflow Actions Card -->
        <div class="actions-card">
            <div class="card-header">
                <h3><i class="fas fa-cogs"></i> Available Actions</h3>
            </div>
            <div class="card-body">
                @if (Model.AvailableActions.Any())
                {
                    <div class="action-buttons">
                        @foreach (var action in Model.AvailableActions)
                        {
                            @switch (action)
                            {
                                case "Mark as Completed":
                                    <button type="button" class="btn btn-success action-btn" 
                                            onclick="updateProjectStatus('@ProjectStatus.Completed')">
                                        <i class="fas fa-flag-checkered"></i> Mark as Completed
                                    </button>
                                    break;
                                case "Submit for Review":
                                    <button type="button" class="btn btn-primary action-btn" 
                                            onclick="updateProjectStatus('@ProjectStatus.SubmittedForReview')">
                                        <i class="fas fa-paper-plane"></i> Submit for Review
                                    </button>
                                    break;
                                case "Approve Review":
                                    <button type="button" class="btn btn-success action-btn" 
                                            onclick="showApprovalModal()">
                                        <i class="fas fa-thumbs-up"></i> Approve Review
                                    </button>
                                    break;
                                case "Reject Review":
                                    <button type="button" class="btn btn-danger action-btn" 
                                            onclick="showRejectionModal()">
                                        <i class="fas fa-thumbs-down"></i> Reject Review
                                    </button>
                                    break;
                                case "Schedule Defense":
                                    <button type="button" class="btn btn-warning action-btn" 
                                            onclick="showDefenseModal()">
                                        <i class="fas fa-calendar-alt"></i> Schedule Defense
                                    </button>
                                    break;
                                case "Assign Grade":
                                    <button type="button" class="btn btn-info action-btn" 
                                            onclick="showGradeModal()">
                                        <i class="fas fa-award"></i> Assign Grade
                                    </button>
                                    break;
                                case "Publish Project":
                                    <button type="button" class="btn btn-success action-btn" 
                                            onclick="updateProjectStatus('@ProjectStatus.Published')">
                                        <i class="fas fa-globe"></i> Publish Project
                                    </button>
                                    break;
                                case "Assign Evaluator":
                                    <button type="button" class="btn btn-secondary action-btn" 
                                            onclick="showEvaluatorModal()">
                                        <i class="fas fa-user-check"></i> Assign Evaluator
                                    </button>
                                    break;
                                case "Resubmit for Review":
                                    <button type="button" class="btn btn-primary action-btn" 
                                            onclick="updateProjectStatus('@ProjectStatus.SubmittedForReview')">
                                        <i class="fas fa-redo"></i> Resubmit for Review
                                    </button>
                                    break;
                            }
                        }
                    </div>
                }
                else
                {
                    <div class="no-actions">
                        <p class="text-muted"><i class="fas fa-info-circle"></i> No actions available for this project status.</p>
                    </div>
                }
            </div>
        </div>

        <!-- Activity Log Card -->
        @if (Model.ActivityLog.Any())
        {
            <div class="activity-card">
                <div class="card-header">
                    <h3><i class="fas fa-history"></i> Activity Log</h3>
                </div>
                <div class="card-body">
                    <div class="activity-timeline">
                        @foreach (var activity in Model.ActivityLog)
                        {
                            <div class="timeline-item">
                                <div class="timeline-marker">
                                    <i class="fas fa-circle"></i>
                                </div>
                                <div class="timeline-content">
                                    <div class="activity-header">
                                        <strong>@activity.Activity</strong>
                                        <span class="activity-time">@activity.PerformedAt.ToString("MMM d, yyyy HH:mm")</span>
                                    </div>
                                    <div class="activity-performer">
                                        <i class="fas fa-user"></i> @activity.PerformedBy
                                    </div>
                                    @if (!string.IsNullOrEmpty(activity.Details))
                                    {
                                        <div class="activity-details">
                                            @activity.Details
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modals -->
<!-- Review Approval Modal -->
<div class="modal fade" id="approvalModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Approve Review</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="approvalForm">
                    <div class="mb-3">
                        <label for="approvalComments" class="form-label">Review Comments</label>
                        <textarea class="form-control" id="approvalComments" rows="4" 
                                  placeholder="Enter review comments..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="approveReview()">Approve Review</button>
            </div>
        </div>
    </div>
</div>

<!-- Review Rejection Modal -->
<div class="modal fade" id="rejectionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reject Review</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="rejectionForm">
                    <div class="mb-3">
                        <label for="rejectionComments" class="form-label">Rejection Reason *</label>
                        <textarea class="form-control" id="rejectionComments" rows="4" required
                                  placeholder="Please provide specific feedback for rejection..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="rejectReview()">Reject Review</button>
            </div>
        </div>
    </div>
</div>

<!-- Defense Scheduling Modal -->
<div class="modal fade" id="defenseModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Schedule Defense</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="defenseForm">
                    <div class="mb-3">
                        <label for="defenseDate" class="form-label">Defense Date & Time *</label>
                        <input type="datetime-local" class="form-control" id="defenseDate" required>
                    </div>
                    <div class="mb-3">
                        <label for="defenseLocation" class="form-label">Location</label>
                        <input type="text" class="form-control" id="defenseLocation" 
                               placeholder="Enter defense location...">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-warning" onclick="scheduleDefense()">Schedule Defense</button>
            </div>
        </div>
    </div>
</div>

<!-- Grade Assignment Modal -->
<div class="modal fade" id="gradeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Grade</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="gradeForm">
                    <div class="mb-3">
                        <label for="projectGrade" class="form-label">Grade *</label>
                        <select class="form-control" id="projectGrade" required>
                            <option value="">Select grade...</option>
                            <option value="A+">A+ (95-100)</option>
                            <option value="A">A (90-94)</option>
                            <option value="A-">A- (85-89)</option>
                            <option value="B+">B+ (80-84)</option>
                            <option value="B">B (75-79)</option>
                            <option value="B-">B- (70-74)</option>
                            <option value="C+">C+ (65-69)</option>
                            <option value="C">C (60-64)</option>
                            <option value="C-">C- (55-59)</option>
                            <option value="D">D (50-54)</option>
                            <option value="F">F (Below 50)</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="gradeFeedback" class="form-label">Feedback</label>
                        <textarea class="form-control" id="gradeFeedback" rows="4" 
                                  placeholder="Enter feedback for the grade..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-info" onclick="assignGrade()">Assign Grade</button>
            </div>
        </div>
    </div>
</div>

<!-- Evaluator Assignment Modal -->
<div class="modal fade" id="evaluatorModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Evaluator</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="evaluatorForm">
                    <div class="mb-3">
                        <label for="evaluatorSelect" class="form-label">Select Evaluator *</label>
                        <select class="form-control" id="evaluatorSelect" required>
                            <option value="">Loading available professors...</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-secondary" onclick="assignEvaluator()">Assign Evaluator</button>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetStatusClass(ProjectStatus status)
    {
        return status switch
        {
            ProjectStatus.Proposed => "status-proposed",
            ProjectStatus.Approved => "status-approved", 
            ProjectStatus.InProgress => "status-progress",
            ProjectStatus.Completed => "status-completed",
            ProjectStatus.SubmittedForReview => "status-review",
            ProjectStatus.ReviewApproved => "status-review-approved",
            ProjectStatus.ReviewRejected => "status-review-rejected",
            ProjectStatus.Defended => "status-defended",
            ProjectStatus.Published => "status-published",
            _ => "status-default"
        };
    }

    private string GetStatusIcon(ProjectStatus status)
    {
        return status switch
        {
            ProjectStatus.Proposed => "fas fa-lightbulb",
            ProjectStatus.Approved => "fas fa-check-circle",
            ProjectStatus.InProgress => "fas fa-spinner",
            ProjectStatus.Completed => "fas fa-flag-checkered",
            ProjectStatus.SubmittedForReview => "fas fa-paper-plane",
            ProjectStatus.ReviewApproved => "fas fa-thumbs-up",
            ProjectStatus.ReviewRejected => "fas fa-thumbs-down",
            ProjectStatus.Defended => "fas fa-shield-alt",
            ProjectStatus.Published => "fas fa-globe",
            _ => "fas fa-question-circle"
        };
    }

    private string GetStatusDisplayName(ProjectStatus status)
    {
        return status switch
        {
            ProjectStatus.Proposed => "Proposed",
            ProjectStatus.Approved => "Approved",
            ProjectStatus.InProgress => "In Progress",
            ProjectStatus.Completed => "Completed",
            ProjectStatus.SubmittedForReview => "Under Review",
            ProjectStatus.ReviewApproved => "Review Approved",
            ProjectStatus.ReviewRejected => "Review Rejected",
            ProjectStatus.Defended => "Defended",
            ProjectStatus.Published => "Published",
            _ => status.ToString()
        };
    }
}

<script>
const projectId = @Model.Project.Id;

// Status update function
function updateProjectStatus(newStatus) {
    if (confirm(`Are you sure you want to change the project status to ${newStatus}?`)) {
        fetch('@Url.Action("UpdateProjectStatus")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: `projectId=${projectId}&newStatus=${newStatus}`
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('success', data.message);
                setTimeout(() => location.reload(), 1500);
            } else {
                showAlert('danger', data.message);
            }
        })
        .catch(error => {
            showAlert('danger', 'An error occurred while updating the project status.');
        });
    }
}

// Modal functions
function showApprovalModal() {
    new bootstrap.Modal(document.getElementById('approvalModal')).show();
}

function showRejectionModal() {
    new bootstrap.Modal(document.getElementById('rejectionModal')).show();
}

function showDefenseModal() {
    new bootstrap.Modal(document.getElementById('defenseModal')).show();
}

function showGradeModal() {
    new bootstrap.Modal(document.getElementById('gradeModal')).show();
}

function showEvaluatorModal() {
    loadAvailableProfessors();
    new bootstrap.Modal(document.getElementById('evaluatorModal')).show();
}

// Action functions
function approveReview() {
    const comments = document.getElementById('approvalComments').value;
    
    fetch('@Url.Action("UpdateProjectStatus")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        },
        body: `projectId=${projectId}&newStatus=@ProjectStatus.ReviewApproved&comments=${encodeURIComponent(comments)}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            bootstrap.Modal.getInstance(document.getElementById('approvalModal')).hide();
            showAlert('success', data.message);
            setTimeout(() => location.reload(), 1500);
        } else {
            showAlert('danger', data.message);
        }
    });
}

function rejectReview() {
    const comments = document.getElementById('rejectionComments').value;
    
    if (!comments.trim()) {
        showAlert('warning', 'Please provide rejection reason.');
        return;
    }
    
    fetch('@Url.Action("UpdateProjectStatus")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        },
        body: `projectId=${projectId}&newStatus=@ProjectStatus.ReviewRejected&comments=${encodeURIComponent(comments)}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            bootstrap.Modal.getInstance(document.getElementById('rejectionModal')).hide();
            showAlert('success', data.message);
            setTimeout(() => location.reload(), 1500);
        } else {
            showAlert('danger', data.message);
        }
    });
}

function scheduleDefense() {
    const defenseDate = document.getElementById('defenseDate').value;
    const location = document.getElementById('defenseLocation').value;
    
    if (!defenseDate) {
        showAlert('warning', 'Please select a defense date and time.');
        return;
    }
    
    fetch('@Url.Action("ScheduleDefense")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        },
        body: `projectId=${projectId}&defenseDate=${encodeURIComponent(defenseDate)}&location=${encodeURIComponent(location)}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            bootstrap.Modal.getInstance(document.getElementById('defenseModal')).hide();
            showAlert('success', data.message);
            setTimeout(() => location.reload(), 1500);
        } else {
            showAlert('danger', data.message);
        }
    });
}

function assignGrade() {
    const grade = document.getElementById('projectGrade').value;
    const feedback = document.getElementById('gradeFeedback').value;
    
    if (!grade) {
        showAlert('warning', 'Please select a grade.');
        return;
    }
    
    fetch('@Url.Action("AssignGrade")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        },
        body: `projectId=${projectId}&grade=${encodeURIComponent(grade)}&feedback=${encodeURIComponent(feedback)}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            bootstrap.Modal.getInstance(document.getElementById('gradeModal')).hide();
            showAlert('success', data.message);
            setTimeout(() => location.reload(), 1500);
        } else {
            showAlert('danger', data.message);
        }
    });
}

function assignEvaluator() {
    const evaluatorId = document.getElementById('evaluatorSelect').value;
    
    if (!evaluatorId) {
        showAlert('warning', 'Please select an evaluator.');
        return;
    }
    
    fetch('@Url.Action("AssignEvaluator")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        },
        body: `projectId=${projectId}&evaluatorId=${evaluatorId}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            bootstrap.Modal.getInstance(document.getElementById('evaluatorModal')).hide();
            showAlert('success', data.message);
            setTimeout(() => location.reload(), 1500);
        } else {
            showAlert('danger', data.message);
        }
    });
}

function loadAvailableProfessors() {
    fetch('@Url.Action("GetAvailableProfessors")')
    .then(response => response.json())
    .then(data => {
        const select = document.getElementById('evaluatorSelect');
        select.innerHTML = '<option value="">Select an evaluator...</option>';
        
        data.forEach(prof => {
            const option = document.createElement('option');
            option.value = prof.id;
            option.textContent = `${prof.name} (${prof.department})`;
            select.appendChild(option);
        });
    })
    .catch(error => {
        showAlert('danger', 'Failed to load available professors.');
    });
}

function showAlert(type, message) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    const container = document.querySelector('.workflow-details-wrapper');
    container.insertBefore(alertDiv, container.firstChild);
    
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 5000);
}
</script>

<style>
.workflow-details-wrapper {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}

.page-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
    flex-wrap: wrap;
}

.header-content {
    flex: 1;
}

.breadcrumb {
    background: transparent;
    padding: 0;
    margin-bottom: 1rem;
}

.breadcrumb-item a {
    color: var(--primary-color);
    text-decoration: none;
}

.page-title {
    font-size: 2rem;
    font-weight: 600;
    color: #495057;
    margin-bottom: 1rem;
}

.project-status-badge {
    margin-bottom: 1rem;
}

.status-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 25px;
    font-weight: 500;
    font-size: 0.875rem;
    color: #f8fafc;
}

.status-proposed { background: #ffc107; }
.status-approved { background: #28a745; }
.status-progress { background: #007bff; }
.status-completed { background: #17a2b8; }
.status-review { background: #fd7e14; }
.status-review-approved { background: #20c997; }
.status-review-rejected { background: #dc3545; }
.status-defended { background: #6f42c1; }
.status-published { background: #198754; }

.workflow-content {
    display: grid;
    gap: 2rem;
    grid-template-columns: 1fr;
}

.info-card, .actions-card, .activity-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.card-header {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: #f8fafc;
    padding: 1.5rem;
}

.card-header h3 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.card-body {
    padding: 1.5rem;
}

.info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
}

.info-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.info-item label {
    font-weight: 600;
    color: #6c757d;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.info-item .value {
    font-size: 1rem;
    color: #495057;
}

.user-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.user-avatar {
    border-radius: 50%;
    width: 32px;
    height: 32px;
}

.grade-badge {
    background: #28a745;
    color: #f8fafc;
    padding: 0.375rem 0.75rem;
    border-radius: 20px;
    font-weight: 500;
    font-size: 0.875rem;
}

.action-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
}

.action-btn {
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border: none;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.875rem;
}

.no-actions {
    text-align: center;
    padding: 2rem;
    color: #6c757d;
}

.activity-timeline {
    position: relative;
    padding-left: 2rem;
}

.timeline-item {
    position: relative;
    margin-bottom: 2rem;
    padding-left: 1.5rem;
}

.timeline-item:last-child {
    margin-bottom: 0;
}

.timeline-marker {
    position: absolute;
    left: -2.25rem;
    top: 0.25rem;
    width: 1rem;
    height: 1rem;
    background: var(--primary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #f8fafc;
    font-size: 0.5rem;
}

.timeline-item::before {
    content: '';
    position: absolute;
    left: -1.75rem;
    top: 1.5rem;
    bottom: -2rem;
    width: 2px;
    background: #dee2e6;
}

.timeline-item:last-child::before {
    display: none;
}

.timeline-content {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 1rem;
}

.activity-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.5rem;
    flex-wrap: wrap;
}

.activity-time {
    color: #6c757d;
    font-size: 0.8125rem;
    font-weight: normal;
}

.activity-performer {
    color: #6c757d;
    font-size: 0.875rem;
    margin-bottom: 0.5rem;
}

.activity-details {
    font-size: 0.875rem;
    color: #495057;
    font-style: italic;
    margin-top: 0.5rem;
}

.btn {
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-weight: 500;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    border: none;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.875rem;
}

.btn-primary {
    background: var(--primary-color);
    color: #f8fafc;
}

.btn-primary:hover {
    background: var(--primary-dark);
}

.btn-success {
    background: #28a745;
    color: #f8fafc;
}

.btn-success:hover {
    background: #218838;
}

.btn-danger {
    background: #dc3545;
    color: #f8fafc;
}

.btn-danger:hover {
    background: #c82333;
}

.btn-warning {
    background: #ffc107;
    color: #212529;
}

.btn-warning:hover {
    background: #e0a800;
}

.btn-info {
    background: #17a2b8;
    color: #f8fafc;
}

.btn-info:hover {
    background: #138496;
}

.btn-secondary {
    background: #6c757d;
    color: #f8fafc;
}

.btn-secondary:hover {
    background: #5a6268;
}

.btn-outline-secondary {
    border: 1px solid #6c757d;
    color: #6c757d;
    background: transparent;
}

.btn-outline-secondary:hover {
    background: #6c757d;
    color: #f8fafc;
}

.modal-content {
    border-radius: 12px;
    border: none;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
}

.modal-header {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: #f8fafc;
    border-radius: 12px 12px 0 0;
    border-bottom: none;
    padding: 1.5rem;
}

.modal-title {
    font-weight: 600;
}

.btn-close {
    filter: invert(1);
}

.form-label {
    font-weight: 600;
    color: #495057;
    margin-bottom: 0.5rem;
}

.form-control {
    border: 1px solid #dee2e6;
    border-radius: 6px;
    padding: 0.75rem;
    font-size: 0.875rem;
}

.form-control:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(var(--primary-rgb), 0.25);
}

.alert {
    border-radius: 8px;
    border: none;
    margin-bottom: 1rem;
}

/* Media Queries */
@@media (max-width: 768px) {
    .page-header {
        flex-direction: column;
        align-items: stretch;
    }
    
    .page-actions {
        margin-top: 1rem;
    }
    
    .info-grid {
        grid-template-columns: 1fr;
    }
    
    .action-buttons {
        flex-direction: column;
    }
    
    .activity-header {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .activity-time {
        margin-top: 0.25rem;
    }
}
</style>