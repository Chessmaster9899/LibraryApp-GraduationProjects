@model List<LibraryApp.Models.Notification>
@{
    ViewData["Title"] = "Notifications";
    var currentPage = ViewBag.CurrentPage ?? 1;
    var totalPages = ViewBag.TotalPages ?? 1;
    var totalNotifications = ViewBag.TotalNotifications ?? 0;
    var unreadCount = ViewBag.UnreadCount ?? 0;
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2><i class="fas fa-bell"></i> @ViewData["Title"]</h2>
                    <p class="text-muted mb-0">
                        Total: @totalNotifications notifications | 
                        <span class="text-warning">@unreadCount unread</span>
                    </p>
                </div>
                <div class="btn-group">
                    <a href="@Url.Action("Index")" class="btn btn-outline-primary @(Context.Request.Query.ContainsKey("unread") ? "" : "active")">
                        <i class="fas fa-list"></i> All
                    </a>
                    <a href="@Url.Action("Unread")" class="btn btn-outline-warning @(Context.Request.Query.ContainsKey("unread") ? "active" : "")">
                        <i class="fas fa-exclamation-circle"></i> Unread (@unreadCount)
                    </a>
                </div>
            </div>
        </div>
    </div>

    @if (unreadCount > 0)
    {
        <div class="row mb-3">
            <div class="col-12">
                <form asp-action="MarkAllAsRead" method="post" class="d-inline">
                    <button type="submit" class="btn btn-sm btn-success">
                        <i class="fas fa-check-double"></i> Mark All as Read
                    </button>
                </form>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-12">
            @if (Model.Any())
            {
                <div class="card shadow-sm">
                    <div class="card-body p-0">
                        <div class="list-group list-group-flush">
                            @foreach (var notification in Model)
                            {
                                <div class="list-group-item @(!notification.IsRead ? "bg-light border-start border-primary border-3" : "") notification-item" 
                                     data-notification-id="@notification.Id">
                                    <div class="d-flex w-100 justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <div class="d-flex align-items-center mb-1">
                                                <h6 class="mb-0 me-2">
                                                    @if (!notification.IsRead)
                                                    {
                                                        <i class="fas fa-circle text-primary" style="font-size: 8px;"></i>
                                                    }
                                                    @notification.Title
                                                </h6>
                                                <small class="text-muted">@notification.CreatedDate.ToString("MMM dd, yyyy hh:mm tt")</small>
                                            </div>
                                            <p class="mb-2 text-wrap">@notification.Message</p>
                                            
                                            <div class="d-flex gap-2">
                                                @if (!string.IsNullOrEmpty(notification.RelatedUrl))
                                                {
                                                    <form asp-action="MarkAsRead" method="post" class="d-inline">
                                                        <input type="hidden" name="id" value="@notification.Id" />
                                                        <button type="submit" class="btn btn-sm btn-primary">
                                                            <i class="fas fa-external-link-alt"></i> View Details
                                                        </button>
                                                    </form>
                                                }
                                                
                                                @if (!notification.IsRead)
                                                {
                                                    <button class="btn btn-sm btn-outline-success mark-read-btn" 
                                                            data-notification-id="@notification.Id">
                                                        <i class="fas fa-check"></i> Mark as Read
                                                    </button>
                                                }
                                                
                                                <button class="btn btn-sm btn-outline-danger delete-notification-btn" 
                                                        data-notification-id="@notification.Id">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                @if (totalPages > 1)
                {
                    <nav aria-label="Notifications pagination" class="mt-4">
                        <ul class="pagination justify-content-center">
                            @if (currentPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { page = currentPage - 1 })">
                                        <i class="fas fa-chevron-left"></i> Previous
                                    </a>
                                </li>
                            }

                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                                </li>
                            }

                            @if (currentPage < totalPages)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { page = currentPage + 1 })">
                                        Next <i class="fas fa-chevron-right"></i>
                                    </a>
                                </li>
                            }
                        </ul>
                    </nav>
                }
            }
            else
            {
                <div class="card shadow-sm">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-bell-slash text-muted" style="font-size: 4rem;"></i>
                        <h4 class="mt-3 text-muted">No notifications</h4>
                        <p class="text-muted">You're all caught up! No notifications to show.</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Hidden forms for AJAX actions -->
<form id="markReadForm" method="post" style="display: none;">
    <input type="hidden" name="id" id="markReadId" />
</form>

<form id="deleteForm" method="post" style="display: none;">
    <input type="hidden" name="id" id="deleteId" />
</form>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Mark as read functionality
            $('.mark-read-btn').click(function(e) {
                e.preventDefault();
                var notificationId = $(this).data('notification-id');
                var button = $(this);
                
                $('#markReadId').val(notificationId);
                var formData = $('#markReadForm').serialize();
                
                $.ajax({
                    url: '@Url.Action("MarkAsRead")',
                    type: 'POST',
                    data: formData,
                    success: function() {
                        var notificationItem = button.closest('.notification-item');
                        notificationItem.removeClass('bg-light border-start border-primary border-3');
                        notificationItem.find('.fa-circle').remove();
                        button.remove();
                        
                        // Update unread count
                        updateUnreadCount();
                    },
                    error: function() {
                        alert('Error marking notification as read. Please try again.');
                    }
                });
            });

            // Delete notification functionality
            $('.delete-notification-btn').click(function(e) {
                e.preventDefault();
                var notificationId = $(this).data('notification-id');
                var button = $(this);
                
                if (confirm('Are you sure you want to delete this notification?')) {
                    $('#deleteId').val(notificationId);
                    var formData = $('#deleteForm').serialize();
                    
                    $.ajax({
                        url: '@Url.Action("Delete")',
                        type: 'POST',
                        data: formData,
                        success: function() {
                            button.closest('.notification-item').fadeOut(300, function() {
                                $(this).remove();
                                
                                // Check if no notifications left
                                if ($('.notification-item').length === 0) {
                                    location.reload();
                                }
                            });
                            
                            // Update unread count
                            updateUnreadCount();
                        },
                        error: function() {
                            alert('Error deleting notification. Please try again.');
                        }
                    });
                }
            });

            function updateUnreadCount() {
                $.get('@Url.Action("GetUnreadCount")', function(data) {
                    // Update navigation badge if it exists
                    $('.notification-badge').text(data.count);
                    if (data.count === 0) {
                        $('.notification-badge').hide();
                    }
                });
            }
        });
    </script>
}

@section Styles {
    <style>
        .notification-item {
            transition: all 0.2s ease;
        }
        
        .notification-item:hover {
            background-color: rgba(0, 123, 255, 0.05) !important;
        }
        
        .text-wrap {
            word-wrap: break-word;
            word-break: break-word;
        }
        
        .border-3 {
            border-width: 3px !important;
        }
        
        .fa-circle {
            margin-right: 8px;
        }
    </style>
}